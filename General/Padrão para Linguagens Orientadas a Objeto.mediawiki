= Padrão para Linguagens Orientadas a Objetos =

== Obrigatório ==
*	Sempre usar notação Camelo. 
*	Não use siglas e palavras reduzidas.
*	Todo o código deve ser escrito em Inglês.
*	No nome de cada estrutura deve incluir o tipo de estrutura, a menos que seja void ou uma classe.
=== Estrutura ===
*	Tamanho Tab deve ser equivalente a 5 espaços.
*	Se a estrutura ultrapassar 100 caracteres envolver, sempre que necessário.
*	Abrir chaves, abrir parênteses, abrir colchetes, menor que deve ser sempre do lado do último elemento, sem espaços e novas linhas.
*	Fechar chaves, fechar parênteses, fechar colchetes, menor que sempre deve ser ao lado do ponto e vírgula, se ele tiver, sem espaços e novas linhas..
*	Se a estrutura permite chaves, use-as.
=== Arquivos, Pacotes e Namespaces  ===
*	Um namespace totalmente qualificado e classe deve ter a seguinte estrutura <code> \ <Nome fornecedor> \ <File Type> \ <namespace> \ <nome> </ code>
*	Cada namespace deve ter um espaço de nomes de nível superior ("Vendor Name").
*	Cada namespace pode ter quantos sub-namespaces precisar.
*	Deve começar com letra maiúscula.
==== Exemplos ====
*	<code>\Doctrine\Common\IsolatedClassLoader</code> => <code>/Path/To/Project/Library/4CarrUs/Php/Doctrine/Common/IsolatedClassLoader.php</code>
*	<code>\Symfony\Core\Request</code> => <code>/Path/To/Project/Library/Vendor/Php/Symfony/Core/Request.php</code>
*	<code>\Zend\Acl</code> => <code>/Path/To/Project/Library/Vendor/Stylesheet/Zend/Acl.css</code>
*	<code>\Zend\Mail\Message</code> => <code>/Path/To/Project/Library/Vendor/Java/Zend/Mail/Message.java</code>
=== Classes, Objetos, Variáveis, Funções, Métodos e outras estruturas ===
*	Se possivel faça métodos private, se não faça protected. Se ainda não for possível, então faça métodos public.
==== Classes ====
*	Deve começar com letra maiúscula.
*	Se possível sempre usar um arquivo para uma única classe.
===== Estrutura =====
===== Exemplos =====
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	class Example{
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	interface InterfaceExample{
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	class Example extends OtherClass{
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	class Example ex|tends OtherClass{
		...			|
	}				|
</pre> =>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	class Example ex|tends
		OtherClass{	|
		...			|
	}				|
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	class ExempleWithGenericType<S, T extends Element & List>{
		...
	}
</pre>
==== Objetos e Variáveis ====
*	Deve começar com letra minúscula.
*	Sempre fazer getters e setters.
===== Exemplos =====
*	<code>int idade</code> => <code>int integerAge</code>
*	<code>new Database main</code> => <code>new Database databaseMain</code>
===== Constantes =====
*	Constantes devem especificar no nome.
====== Exemplos ======
*	<code>const double precoFixo</code> => <code>const double constantDoubleFixedPrice</code>
==== Funções e Métodos ====
*	Devem começar com letra minúscula.
===== Estrutura =====

====== Exemplos ======
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	void example(){
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	int integerExample(){
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	int integerExample(int integerVariable){
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	int integerExamp|le(int integerVariable, int integerVariable2){
		...			|
	}				|
</pre> =>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	int integerExamp|le(
		int integer|Variable, 
		int integer|Variable2){
		...			|
	}				|
</pre>
==== Switch ====

===== Estrutura =====
====== Exemplos ======
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	switch(integerExample){
		case 0:
			...
		break;
		
		case 2:
			...
		break;
		
		case 3:
			...
		break;
		
		default:
			...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	switch(enumCharExample){
		case EnumExample.constantNoSignal:
			...
		break;
		
		case EnumExample.constantOnline:
			...
		break;
		
		default:
			...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	switch(enumIntegerExample){
		case EnumExample.constant|NoSignal:
			...					 |
		break;					 |
								 |
		case EnumExample.constant|Online:
			...					 |
		break;					 |
								 |
		default:				 |
			...					 |
	}				
</pre> =>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	switch(enumIntegerExample){
		case EnumExample.constant|NoSignal:
			...					 |
		break;					 |
								 |
		case EnumExample.constant|Online:
			...					 |
		break;					 |
								 |
		default:				 |
			...					 |
	}							 |
</pre>
==== Loops ====

===== Estrutura =====
====== Exemplos ======
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	while(booleanExample){
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	do{
		...
	}while(booleanExample);
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	for(unsigned int integerIndex=0; integerIndex<100; integerIndex++){
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	for(unsigned int| integerIndex=0; integerIndex<100; integerIndex++){
		...			|
	}				|
</pre> =>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	for(unsigned int| integerIndex=0; integerIndex<100; integerIndex++){
		...			|
	}				|
</pre>
==== Condicionais ====

===== Estrutura =====
*	Não use "else if", use "else" e dentro dele use "if";
*   Não use operadores ternários.
====== Exemplos ======
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	if(booleanExample){
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	if(booleanExample){
		...
	}else{
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	if(booleanExample){
		...
	}else if(booleanExample2){
		...
	}
</pre> =>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	if(booleanExample){
		...
	}else{
		if(booleanExample2){
			...
		}
	}
</pre>
==== Struct ====
===== Estrutura =====
*	Escreva como uma classe.
====== Exemplos ======
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	struct Example {
		int integerExample;
		char characterExample;
	};
</pre>
==== Enumerator (Enum) ====
===== Estrutura =====
*	Escreva com a mesma estrutura de uma classe.
*	O tipo deve ser especificado no nome (padrão: integer), se possível.
====== Exemplos ======
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	enum Planet{
		constantMercury(3.303e+23, 2.4397e6),
		constantVenus(4.869e+24, 6.0518e6),
		constantEarth(5.976e+24, 6.37814e6),
		constantMars(6.421e+23, 3.3972e6),
		constantJupter(1.9e+27, 7.1492e7),
		constantSaturn(5.688e+26, 6.0268e7),
		constantUranus(8.686e+25, 2.5559e7),
		constantNeptune(1.024e+26, 2.4746e7);
		
		private final double doubleKilogramsMass;
		private final double doubleMetersRadius;
		
		Planet(doubleKilogramsMass, doubleMetersRadius){
			setDoubleKilogramsMass(doubleKilogramsMass);
			setDoubleMetersRadius(doubleMetersRadius);
		}
		
		public double getDoubleKilogramsMass(){
			return this.doubleKilogramsMass;
		}
		
		public double getDoubleMetersRadius(){
			return this.doubleMetersRadius;
		}
		
		private void setDoubleKilogramsMass(double doubleKilogramsMass){
			this.doubleKilogramsMass = doubleKilogramsMass;
		}
		
		public void setDoubleMetersRadius(double doubleMetersRadius){
			this.doubleMetersRadius = doubleMetersRadius;
		}
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	enum IntegerDay{
		constantSunday,
		constantMonday,
		constantTuesday,
		constantWednesday,
		constantThursday,
		constantFriday,
		constantSaturday;
	}
</pre>
